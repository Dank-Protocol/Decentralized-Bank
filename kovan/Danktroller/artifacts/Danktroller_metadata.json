{
	"compiler": {
		"version": "0.5.17+commit.d19bba13"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "string",
						"name": "action",
						"type": "string"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "pauseState",
						"type": "bool"
					}
				],
				"name": "ActionPaused",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "contract DToken",
						"name": "dToken",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "action",
						"type": "string"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "pauseState",
						"type": "bool"
					}
				],
				"name": "ActionPaused",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "contract DToken",
						"name": "dToken",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newSpeed",
						"type": "uint256"
					}
				],
				"name": "DankSpeedUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "contract DToken",
						"name": "dToken",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "borrower",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "dankDelta",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "dankBorrowIndex",
						"type": "uint256"
					}
				],
				"name": "DistributedBorrowerDank",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "contract DToken",
						"name": "dToken",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "supplier",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "dankDelta",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "dankSupplyIndex",
						"type": "uint256"
					}
				],
				"name": "DistributedSupplierDank",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "error",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "info",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "detail",
						"type": "uint256"
					}
				],
				"name": "Failure",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "contract DToken",
						"name": "dToken",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "isDanked",
						"type": "bool"
					}
				],
				"name": "MarketDanked",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "contract DToken",
						"name": "dToken",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "MarketEntered",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "contract DToken",
						"name": "dToken",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "MarketExited",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "contract DToken",
						"name": "dToken",
						"type": "address"
					}
				],
				"name": "MarketListed",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "contract DToken",
						"name": "dToken",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "limit",
						"type": "uint256"
					}
				],
				"name": "NewBorrowLimit",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "oldCloseFactorMantissa",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newCloseFactorMantissa",
						"type": "uint256"
					}
				],
				"name": "NewCloseFactor",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "contract DToken",
						"name": "dToken",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "oldCollateralFactorMantissa",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newCollateralFactorMantissa",
						"type": "uint256"
					}
				],
				"name": "NewCollateralFactor",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "oldDankRate",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newDankRate",
						"type": "uint256"
					}
				],
				"name": "NewDankRate",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "oldLiquidationIncentiveMantissa",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newLiquidationIncentiveMantissa",
						"type": "uint256"
					}
				],
				"name": "NewLiquidationIncentive",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "oldMaxAssets",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newMaxAssets",
						"type": "uint256"
					}
				],
				"name": "NewMaxAssets",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "oldPauseGuardian",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "newPauseGuardian",
						"type": "address"
					}
				],
				"name": "NewPauseGuardian",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "contract PriceOracle",
						"name": "oldPriceOracle",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "contract PriceOracle",
						"name": "newPriceOracle",
						"type": "address"
					}
				],
				"name": "NewPriceOracle",
				"type": "event"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address[]",
						"name": "dTokens",
						"type": "address[]"
					}
				],
				"name": "_addDankMarkets",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "contract Unitroller",
						"name": "unitroller",
						"type": "address"
					}
				],
				"name": "_become",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "uint256",
						"name": "defaultBorrowLimit",
						"type": "uint256"
					}
				],
				"name": "_becomeG5",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "_borrowGuardianPaused",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "dToken",
						"type": "address"
					}
				],
				"name": "_dropDankMarket",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "_mintGuardianPaused",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "contract DToken",
						"name": "dToken",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "state",
						"type": "bool"
					}
				],
				"name": "_setBorrowPaused",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "uint256",
						"name": "newCloseFactorMantissa",
						"type": "uint256"
					}
				],
				"name": "_setCloseFactor",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "contract DToken",
						"name": "dToken",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "newCollateralFactorMantissa",
						"type": "uint256"
					}
				],
				"name": "_setCollateralFactor",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "uint256",
						"name": "dankRate_",
						"type": "uint256"
					}
				],
				"name": "_setDankRate",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "uint256",
						"name": "newLiquidationIncentiveMantissa",
						"type": "uint256"
					}
				],
				"name": "_setLiquidationIncentive",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "contract DToken",
						"name": "dToken",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "borrowLimit",
						"type": "uint256"
					}
				],
				"name": "_setMarketBorrowLimit",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "uint256",
						"name": "newMaxAssets",
						"type": "uint256"
					}
				],
				"name": "_setMaxAssets",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "contract DToken",
						"name": "dToken",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "state",
						"type": "bool"
					}
				],
				"name": "_setMintPaused",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "newPauseGuardian",
						"type": "address"
					}
				],
				"name": "_setPauseGuardian",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "contract PriceOracle",
						"name": "newOracle",
						"type": "address"
					}
				],
				"name": "_setPriceOracle",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "bool",
						"name": "state",
						"type": "bool"
					}
				],
				"name": "_setSeizePaused",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "bool",
						"name": "state",
						"type": "bool"
					}
				],
				"name": "_setTransferPaused",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "contract DToken",
						"name": "dToken",
						"type": "address"
					}
				],
				"name": "_supportMarket",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "accountAssets",
				"outputs": [
					{
						"internalType": "contract DToken",
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "admin",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "allMarkets",
				"outputs": [
					{
						"internalType": "contract DToken",
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "dToken",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "borrower",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "borrowAmount",
						"type": "uint256"
					}
				],
				"name": "borrowAllowed",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "borrowGuardianPaused",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "borrowLimits",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "dToken",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "borrower",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "borrowAmount",
						"type": "uint256"
					}
				],
				"name": "borrowVerify",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"internalType": "contract DToken",
						"name": "dToken",
						"type": "address"
					}
				],
				"name": "checkMembership",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "holder",
						"type": "address"
					},
					{
						"internalType": "contract DToken[]",
						"name": "dTokens",
						"type": "address[]"
					}
				],
				"name": "claimDank",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address[]",
						"name": "holders",
						"type": "address[]"
					},
					{
						"internalType": "contract DToken[]",
						"name": "dTokens",
						"type": "address[]"
					},
					{
						"internalType": "bool",
						"name": "borrowers",
						"type": "bool"
					},
					{
						"internalType": "bool",
						"name": "suppliers",
						"type": "bool"
					}
				],
				"name": "claimDank",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "holder",
						"type": "address"
					}
				],
				"name": "claimDank",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "closeFactorMantissa",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "dankAccrued",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "dankBorrowState",
				"outputs": [
					{
						"internalType": "uint224",
						"name": "index",
						"type": "uint224"
					},
					{
						"internalType": "uint32",
						"name": "block",
						"type": "uint32"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "dankBorrowerIndex",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "dankClaimThreshold",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "dankInitialIndex",
				"outputs": [
					{
						"internalType": "uint224",
						"name": "",
						"type": "uint224"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "dankRate",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "dankSpeeds",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "dankSupplierIndex",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "dankSupplyState",
				"outputs": [
					{
						"internalType": "uint224",
						"name": "index",
						"type": "uint224"
					},
					{
						"internalType": "uint32",
						"name": "block",
						"type": "uint32"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "danktrollerImplementation",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address[]",
						"name": "dTokens",
						"type": "address[]"
					}
				],
				"name": "enterMarkets",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "",
						"type": "uint256[]"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "dTokenAddress",
						"type": "address"
					}
				],
				"name": "exitMarket",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "getAccountLiquidity",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "getAllMarkets",
				"outputs": [
					{
						"internalType": "contract DToken[]",
						"name": "",
						"type": "address[]"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "getAssetsIn",
				"outputs": [
					{
						"internalType": "contract DToken[]",
						"name": "",
						"type": "address[]"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "getBlockNumber",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "getDankAddress",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "dTokenModify",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "redeemTokens",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "borrowAmount",
						"type": "uint256"
					}
				],
				"name": "getHypotheticalAccountLiquidity",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "isDanktroller",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "dTokenBorrowed",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "dTokenCollateral",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "liquidator",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "borrower",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "repayAmount",
						"type": "uint256"
					}
				],
				"name": "liquidateBorrowAllowed",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "dTokenBorrowed",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "dTokenCollateral",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "liquidator",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "borrower",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "actualRepayAmount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "seizeTokens",
						"type": "uint256"
					}
				],
				"name": "liquidateBorrowVerify",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "address",
						"name": "dTokenBorrowed",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "dTokenCollateral",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "actualRepayAmount",
						"type": "uint256"
					}
				],
				"name": "liquidateCalculateSeizeTokens",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "liquidationIncentiveMantissa",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "markets",
				"outputs": [
					{
						"internalType": "bool",
						"name": "isListed",
						"type": "bool"
					},
					{
						"internalType": "uint256",
						"name": "collateralFactorMantissa",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "isDanked",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "maxAssets",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "dToken",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "minter",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "mintAmount",
						"type": "uint256"
					}
				],
				"name": "mintAllowed",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "mintGuardianPaused",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "dToken",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "minter",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "actualMintAmount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "mintTokens",
						"type": "uint256"
					}
				],
				"name": "mintVerify",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "oracle",
				"outputs": [
					{
						"internalType": "contract PriceOracle",
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "pauseGuardian",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "pendingAdmin",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "pendingDanktrollerImplementation",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "dToken",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "redeemer",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "redeemTokens",
						"type": "uint256"
					}
				],
				"name": "redeemAllowed",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "dToken",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "redeemer",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "redeemAmount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "redeemTokens",
						"type": "uint256"
					}
				],
				"name": "redeemVerify",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [],
				"name": "refreshDankSpeeds",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "dToken",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "payer",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "borrower",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "repayAmount",
						"type": "uint256"
					}
				],
				"name": "repayBorrowAllowed",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "dToken",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "payer",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "borrower",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "actualRepayAmount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "borrowerIndex",
						"type": "uint256"
					}
				],
				"name": "repayBorrowVerify",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "dTokenCollateral",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "dTokenBorrowed",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "liquidator",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "borrower",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "seizeTokens",
						"type": "uint256"
					}
				],
				"name": "seizeAllowed",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "seizeGuardianPaused",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "dTokenCollateral",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "dTokenBorrowed",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "liquidator",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "borrower",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "seizeTokens",
						"type": "uint256"
					}
				],
				"name": "seizeVerify",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "dToken",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "src",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "dst",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "transferTokens",
						"type": "uint256"
					}
				],
				"name": "transferAllowed",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "transferGuardianPaused",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "dToken",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "src",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "dst",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "transferTokens",
						"type": "uint256"
					}
				],
				"name": "transferVerify",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"author": "Decentralized-Bank",
			"methods": {
				"_addDankMarkets(address[])": {
					"params": {
						"dTokens": "The addresses of the markets to add"
					}
				},
				"_dropDankMarket(address)": {
					"params": {
						"dToken": "The address of the market to drop"
					}
				},
				"_setCloseFactor(uint256)": {
					"details": "Admin function to set closeFactor",
					"params": {
						"newCloseFactorMantissa": "New close factor, scaled by 1e18"
					},
					"return": "uint 0=success, otherwise a failure. (See ErrorReporter for details)"
				},
				"_setCollateralFactor(address,uint256)": {
					"details": "Admin function to set per-market collateralFactor",
					"params": {
						"dToken": "The market to set the factor on",
						"newCollateralFactorMantissa": "The new collateral factor, scaled by 1e18"
					},
					"return": "uint 0=success, otherwise a failure. (See ErrorReporter for details)"
				},
				"_setDankRate(uint256)": {
					"params": {
						"dankRate_": "The amount of DANK wei per block to distribute"
					}
				},
				"_setLiquidationIncentive(uint256)": {
					"details": "Admin function to set liquidationIncentive",
					"params": {
						"newLiquidationIncentiveMantissa": "New liquidationIncentive scaled by 1e18"
					},
					"return": "uint 0=success, otherwise a failure. (See ErrorReporter for details)"
				},
				"_setMarketBorrowLimit(address,uint256)": {
					"details": "Admin function to set the borrow limit",
					"params": {
						"borrowLimit": "The new borrow limit value (maximum borrowing) to be set",
						"dToken": "The address of the market (token) to change the borrow limit for"
					},
					"return": "uint 0=success, otherwise a failure. (See enum Error for details)"
				},
				"_setMaxAssets(uint256)": {
					"details": "Admin function to set maxAssets",
					"params": {
						"newMaxAssets": "New max assets"
					},
					"return": "uint 0=success, otherwise a failure. (See ErrorReporter for details)"
				},
				"_setPauseGuardian(address)": {
					"params": {
						"newPauseGuardian": "The address of the new Pause Guardian"
					},
					"return": "uint 0=success, otherwise a failure. (See enum Error for details)"
				},
				"_setPriceOracle(address)": {
					"details": "Admin function to set a new price oracle",
					"return": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
				},
				"_supportMarket(address)": {
					"details": "Admin function to set isListed and add support for the market",
					"params": {
						"dToken": "The address of the market (token) to list"
					},
					"return": "uint 0=success, otherwise a failure. (See enum Error for details)"
				},
				"borrowAllowed(address,address,uint256)": {
					"params": {
						"borrowAmount": "The amount of underlying the account would borrow",
						"borrower": "The account which would borrow the asset",
						"dToken": "The market to verify the borrow against"
					},
					"return": "0 if the borrow is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)"
				},
				"borrowVerify(address,address,uint256)": {
					"params": {
						"borrowAmount": "The amount of the underlying asset requested to borrow",
						"borrower": "The address borrowing the underlying",
						"dToken": "Asset whose underlying is being borrowed"
					}
				},
				"checkMembership(address,address)": {
					"params": {
						"account": "The address of the account to check",
						"dToken": "The dToken to check"
					},
					"return": "True if the account is in the asset, otherwise false."
				},
				"claimDank(address)": {
					"params": {
						"holder": "The address to claim DANK for"
					}
				},
				"claimDank(address,address[])": {
					"params": {
						"dTokens": "The list of markets to claim DANK in",
						"holder": "The address to claim DANK for"
					}
				},
				"claimDank(address[],address[],bool,bool)": {
					"params": {
						"borrowers": "Whether or not to claim DANK earned by borrowing",
						"dTokens": "The list of markets to claim DANK in",
						"holders": "The addresses to claim DANK for",
						"suppliers": "Whether or not to claim DANK earned by supplying"
					}
				},
				"enterMarkets(address[])": {
					"params": {
						"dTokens": "The list of addresses of the dToken markets to be enabled"
					},
					"return": "Success indicator for whether each corresponding market was entered"
				},
				"exitMarket(address)": {
					"details": "Sender must not have an outstanding borrow balance in the asset, or be providing necessary collateral for an outstanding borrow.",
					"params": {
						"dTokenAddress": "The address of the asset to be removed"
					},
					"return": "Whether or not the account successfully exited the market"
				},
				"getAccountLiquidity(address)": {
					"return": "(possible error code (semi-opaque), account liquidity in excess of collateral requirements,         account shortfall below collateral requirements)"
				},
				"getAllMarkets()": {
					"details": "The automatic getter may be used to access an individual market.",
					"return": "The list of market addresses"
				},
				"getAssetsIn(address)": {
					"params": {
						"account": "The address of the account to pull assets for"
					},
					"return": "A dynamic list with the assets the account has entered"
				},
				"getDankAddress()": {
					"return": "The address of DANK"
				},
				"getHypotheticalAccountLiquidity(address,address,uint256,uint256)": {
					"params": {
						"account": "The account to determine liquidity for",
						"borrowAmount": "The amount of underlying to hypothetically borrow",
						"dTokenModify": "The market to hypothetically redeem/borrow in",
						"redeemTokens": "The number of tokens to hypothetically redeem"
					},
					"return": "(possible error code (semi-opaque), hypothetical account liquidity in excess of collateral requirements,         hypothetical account shortfall below collateral requirements)"
				},
				"liquidateBorrowAllowed(address,address,address,address,uint256)": {
					"params": {
						"borrower": "The address of the borrower",
						"dTokenBorrowed": "Asset which was borrowed by the borrower",
						"dTokenCollateral": "Asset which was used as collateral and will be seized",
						"liquidator": "The address repaying the borrow and seizing the collateral",
						"repayAmount": "The amount of underlying being repaid"
					}
				},
				"liquidateBorrowVerify(address,address,address,address,uint256,uint256)": {
					"params": {
						"actualRepayAmount": "The amount of underlying being repaid",
						"borrower": "The address of the borrower",
						"dTokenBorrowed": "Asset which was borrowed by the borrower",
						"dTokenCollateral": "Asset which was used as collateral and will be seized",
						"liquidator": "The address repaying the borrow and seizing the collateral"
					}
				},
				"liquidateCalculateSeizeTokens(address,address,uint256)": {
					"details": "Used in liquidation (called in dToken.liquidateBorrowFresh)",
					"params": {
						"actualRepayAmount": "The amount of dTokenBorrowed underlying to convert into dTokenCollateral tokens",
						"dTokenBorrowed": "The address of the borrowed dToken",
						"dTokenCollateral": "The address of the collateral dToken"
					},
					"return": "(errorCode, number of dTokenCollateral tokens to be seized in a liquidation)"
				},
				"mintAllowed(address,address,uint256)": {
					"params": {
						"dToken": "The market to verify the mint against",
						"mintAmount": "The amount of underlying being supplied to the market in exchange for tokens",
						"minter": "The account which would get the minted tokens"
					},
					"return": "0 if the mint is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)"
				},
				"mintVerify(address,address,uint256,uint256)": {
					"params": {
						"actualMintAmount": "The amount of the underlying asset being minted",
						"dToken": "Asset being minted",
						"mintTokens": "The number of tokens being minted",
						"minter": "The address minting the tokens"
					}
				},
				"redeemAllowed(address,address,uint256)": {
					"params": {
						"dToken": "The market to verify the redeem against",
						"redeemTokens": "The number of dTokens to exchange for the underlying asset in the market",
						"redeemer": "The account which would redeem the tokens"
					},
					"return": "0 if the redeem is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)"
				},
				"redeemVerify(address,address,uint256,uint256)": {
					"params": {
						"dToken": "Asset being redeemed",
						"redeemAmount": "The amount of the underlying asset being redeemed",
						"redeemTokens": "The number of tokens being redeemed",
						"redeemer": "The address redeeming the tokens"
					}
				},
				"repayBorrowAllowed(address,address,address,uint256)": {
					"params": {
						"borrower": "The account which would borrowed the asset",
						"dToken": "The market to verify the repay against",
						"payer": "The account which would repay the asset",
						"repayAmount": "The amount of the underlying asset the account would repay"
					},
					"return": "0 if the repay is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)"
				},
				"repayBorrowVerify(address,address,address,uint256,uint256)": {
					"params": {
						"actualRepayAmount": "The amount of underlying being repaid",
						"borrower": "The address of the borrower",
						"dToken": "Asset being repaid",
						"payer": "The address repaying the borrow"
					}
				},
				"seizeAllowed(address,address,address,address,uint256)": {
					"params": {
						"borrower": "The address of the borrower",
						"dTokenBorrowed": "Asset which was borrowed by the borrower",
						"dTokenCollateral": "Asset which was used as collateral and will be seized",
						"liquidator": "The address repaying the borrow and seizing the collateral",
						"seizeTokens": "The number of collateral tokens to seize"
					}
				},
				"seizeVerify(address,address,address,address,uint256)": {
					"params": {
						"borrower": "The address of the borrower",
						"dTokenBorrowed": "Asset which was borrowed by the borrower",
						"dTokenCollateral": "Asset which was used as collateral and will be seized",
						"liquidator": "The address repaying the borrow and seizing the collateral",
						"seizeTokens": "The number of collateral tokens to seize"
					}
				},
				"transferAllowed(address,address,address,uint256)": {
					"params": {
						"dToken": "The market to verify the transfer against",
						"dst": "The account which receives the tokens",
						"src": "The account which sources the tokens",
						"transferTokens": "The number of dTokens to transfer"
					},
					"return": "0 if the transfer is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)"
				},
				"transferVerify(address,address,address,uint256)": {
					"params": {
						"dToken": "Asset being transferred",
						"dst": "The account which receives the tokens",
						"src": "The account which sources the tokens",
						"transferTokens": "The number of dTokens to transfer"
					}
				}
			},
			"title": "Decentralized-Bank's Danktroller Contract"
		},
		"userdoc": {
			"methods": {
				"_addDankMarkets(address[])": {
					"notice": "Add markets to dankMarkets, allowing them to earn DANK in the flywheel"
				},
				"_dropDankMarket(address)": {
					"notice": "Remove a market from dankMarkets, preventing it from earning DANK in the flywheel"
				},
				"_setCloseFactor(uint256)": {
					"notice": "Sets the closeFactor used when liquidating borrows"
				},
				"_setCollateralFactor(address,uint256)": {
					"notice": "Sets the collateralFactor for a market"
				},
				"_setDankRate(uint256)": {
					"notice": "Set the amount of DANK distributed per block"
				},
				"_setLiquidationIncentive(uint256)": {
					"notice": "Sets liquidationIncentive"
				},
				"_setMarketBorrowLimit(address,uint256)": {
					"notice": "Set the given borrow limit for the given dToken market"
				},
				"_setMaxAssets(uint256)": {
					"notice": "Sets maxAssets which controls how many markets can be entered"
				},
				"_setPauseGuardian(address)": {
					"notice": "Admin function to change the Pause Guardian"
				},
				"_setPriceOracle(address)": {
					"notice": "Sets a new price oracle for the danktroller"
				},
				"_supportMarket(address)": {
					"notice": "Add the market to the markets mapping and set it as listed"
				},
				"borrowAllowed(address,address,uint256)": {
					"notice": "Checks if the account should be allowed to borrow the underlying asset of the given market"
				},
				"borrowVerify(address,address,uint256)": {
					"notice": "Validates borrow and reverts on rejection. May emit logs."
				},
				"checkMembership(address,address)": {
					"notice": "Returns whether the given account is entered in the given asset"
				},
				"claimDank(address)": {
					"notice": "Claim all the dank accrued by holder in all markets"
				},
				"claimDank(address,address[])": {
					"notice": "Claim all the dank accrued by holder in the specified markets"
				},
				"claimDank(address[],address[],bool,bool)": {
					"notice": "Claim all dank accrued by the holders"
				},
				"enterMarkets(address[])": {
					"notice": "Add assets to be included in account liquidity calculation"
				},
				"exitMarket(address)": {
					"notice": "Removes asset from sender's account liquidity calculation"
				},
				"getAccountLiquidity(address)": {
					"notice": "Determine the current account liquidity wrt collateral requirements"
				},
				"getAllMarkets()": {
					"notice": "Return all of the markets"
				},
				"getAssetsIn(address)": {
					"notice": "Returns the assets an account has entered"
				},
				"getDankAddress()": {
					"notice": "Return the address of the DANK token"
				},
				"getHypotheticalAccountLiquidity(address,address,uint256,uint256)": {
					"notice": "Determine what the account liquidity would be if the given amounts were redeemed/borrowed"
				},
				"liquidateBorrowAllowed(address,address,address,address,uint256)": {
					"notice": "Checks if the liquidation should be allowed to occur"
				},
				"liquidateBorrowVerify(address,address,address,address,uint256,uint256)": {
					"notice": "Validates liquidateBorrow and reverts on rejection. May emit logs."
				},
				"liquidateCalculateSeizeTokens(address,address,uint256)": {
					"notice": "Calculate number of tokens of collateral asset to seize given an underlying amount"
				},
				"mintAllowed(address,address,uint256)": {
					"notice": "Checks if the account should be allowed to mint tokens in the given market"
				},
				"mintVerify(address,address,uint256,uint256)": {
					"notice": "Validates mint and reverts on rejection. May emit logs."
				},
				"redeemAllowed(address,address,uint256)": {
					"notice": "Checks if the account should be allowed to redeem tokens in the given market"
				},
				"redeemVerify(address,address,uint256,uint256)": {
					"notice": "Validates redeem and reverts on rejection. May emit logs."
				},
				"refreshDankSpeeds()": {
					"notice": "Recalculate and update DANK speeds for all DANK markets"
				},
				"repayBorrowAllowed(address,address,address,uint256)": {
					"notice": "Checks if the account should be allowed to repay a borrow in the given market"
				},
				"repayBorrowVerify(address,address,address,uint256,uint256)": {
					"notice": "Validates repayBorrow and reverts on rejection. May emit logs."
				},
				"seizeAllowed(address,address,address,address,uint256)": {
					"notice": "Checks if the seizing of assets should be allowed to occur"
				},
				"seizeVerify(address,address,address,address,uint256)": {
					"notice": "Validates seize and reverts on rejection. May emit logs."
				},
				"transferAllowed(address,address,address,uint256)": {
					"notice": "Checks if the account should be allowed to transfer tokens in the given market"
				},
				"transferVerify(address,address,address,uint256)": {
					"notice": "Validates transfer and reverts on rejection. May emit logs."
				}
			}
		}
	},
	"settings": {
		"compilationTarget": {
			"Danktroller/Danktroller.sol": "Danktroller"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"CarefulMath.sol": {
			"keccak256": "0x2bd26a739db38973ae3105de64ed75973769f6474434ae4902dbdf8a99e45cf2",
			"urls": [
				"bzz-raw://82d402cb231ac5ba205d3d99271882f36b5609880c69d12dd7bd9f62ca118bfd",
				"dweb:/ipfs/QmUwv8qMgEGNG77cDAkYzBbBoZX6pqCKiAhTHM9UgiBcyF"
			]
		},
		"DToken.sol": {
			"keccak256": "0xaf36486fa879b4b693f79709809c456d9e637c1ea3c93c4b16c1dd62f844bfd5",
			"urls": [
				"bzz-raw://9d282c97508bf83099d9348a2e0fe37d36308595e66bab2df56b85fb8198d1e6",
				"dweb:/ipfs/QmXrWky1EMVUD7VAN3THcfUtNG9RTnXBJV11SbRK51DY19"
			]
		},
		"DTokenInterfaces.sol": {
			"keccak256": "0xc10528eb603336244c8a9f27859dc631a8ad620c5f6477d94a171e6bffa6c352",
			"urls": [
				"bzz-raw://99d71643358dbdfed8422fbd8fab9293cbf025c64b604b668fdf980c35796dce",
				"dweb:/ipfs/QmTU1rtQvARE6LaZKSQhVjnguARePGQadsyuQNiJwCSvQV"
			]
		},
		"Danktroller/Danktroller.sol": {
			"keccak256": "0x01d7563cf3ade6016abb307ff4ffc970369641de102b5a4d709d3cb8641a8fb1",
			"urls": [
				"bzz-raw://91ef8cee6afbe6dabb983fb41022ac2832969f437eef573cc5bb877101313d48",
				"dweb:/ipfs/QmTcU4oWhH1McKUEB164fKgwNcm2SPpkqfbbR1ydnzFuST"
			]
		},
		"Danktroller/Unitroller.sol": {
			"keccak256": "0x7bf7bcda115eb3ca797d123a44cb716ebf5dfa5f358dbb434bd3bbaf595cf202",
			"urls": [
				"bzz-raw://e7dc14cc2336d795ae7c3ff63b5d7fcab5afe81f29e0a5f9e44f0b4ec9f9d020",
				"dweb:/ipfs/QmNjfAdnjzZHBqpuZswgNQtMokwa75rZPUN2hLtJrb5hjQ"
			]
		},
		"DanktrollerInterface.sol": {
			"keccak256": "0xa364c9d38317b2940abe0baa8bbd6d9b88175e679a2e95c06e0b7b5f8d13996c",
			"urls": [
				"bzz-raw://470dddc3128a76abc4426aed88aad84fe4090c84146886b4e08e24bca29e46e9",
				"dweb:/ipfs/Qmei2YDz6x27HB7XWu4PuCbGcP7s7M8VPBeTBxLWKkHrhB"
			]
		},
		"DanktrollerStorage.sol": {
			"keccak256": "0x4885efbebabf7f133826aa1a680316021f9487e8d4f69be0d44b426d7f929455",
			"urls": [
				"bzz-raw://931a7c5e674095791d6f5641290aaa8ee3cc66d756ae8c8674daca9984075c10",
				"dweb:/ipfs/QmedHH1gAwiB19tckrqKNnAxT3kNACwHCkB62sr7sp4F1M"
			]
		},
		"EIP20Interface.sol": {
			"keccak256": "0xd89723953595fe8d91f53737d4685a4e1e0f42576f569b1118dfb3d1c0fd5419",
			"urls": [
				"bzz-raw://209124060d3973a9731d343168d6ad0eaa226cc041d6e7dc95738ce1ca30f9c3",
				"dweb:/ipfs/QmeWg82d4desJSbh9rzWZVkaJoRmD6b25MQmxbgfmYUpoq"
			]
		},
		"EIP20NonStandardInterface.sol": {
			"keccak256": "0x234c4d9d37ba68e8e327951bbf9d8176b3daaa379abc9579f63eab00523be4f2",
			"urls": [
				"bzz-raw://15f8d45da762d8e16244cdc698b54400f585496fde6fe30a4c7dd0bbdd9b7e6a",
				"dweb:/ipfs/QmQF4tXrtz6fpXyTe8rc1RdZoXmyvLiDxVfE5UntnpqEoq"
			]
		},
		"ErrorReporter.sol": {
			"keccak256": "0x695c2f7db5f48c2e1b31303211ad4e955f8b18aea2286ea1fcd2e7bdc3f98472",
			"urls": [
				"bzz-raw://12d2895d405d6197852bc53fc01231b9321931a123e26c1002d65f5eb981214a",
				"dweb:/ipfs/QmcyFq1wJsZLUdeKXGBKcpNxQtAdRi4iamw3JdSLLqyZEz"
			]
		},
		"Exponential.sol": {
			"keccak256": "0xf6d6ed20e79083851436277b77546f76b8e4e766bde4fb50b3a6df84d678c44a",
			"urls": [
				"bzz-raw://06b9be8fc5e32d85f9f24a24263c8f0ebcd55eeb8f1819e28b73c14e57c5a924",
				"dweb:/ipfs/QmZcvEjxfgJsVNkYGnX2rdWjetSDMXjJkoAxkmU1AFGxLj"
			]
		},
		"ExponentialNoError.sol": {
			"keccak256": "0x9eb8ba07ab046b7035580d814fe1a8970b24d4fb70b2a1655d38a293caa0b304",
			"urls": [
				"bzz-raw://353c9eb669b73993e1d1500bb97e3a2c4a1ef4a198ecee232b824e313af1516d",
				"dweb:/ipfs/QmNeHWqnDizHN7WYjFEwC65i2RFsKDuUyF5xTwrD5sPhnV"
			]
		},
		"Governance/Dank.sol": {
			"keccak256": "0xacbb0fc39308b0977d960b18a21b591dcc2b96e7a14522743e9efb23effeff29",
			"urls": [
				"bzz-raw://48df94f4150bdd6f786fc6f69f625e5de756459f6e5cbd65dc3f155c858573da",
				"dweb:/ipfs/QmTfQoCe1cfB3LCgP3NzmhzMgxP5WCw9cWiQhiLQbSXLSZ"
			]
		},
		"InterestRateModel.sol": {
			"keccak256": "0x180ad506065b60a7a049c682040722119da7e9e91d28639f419d353169c65905",
			"urls": [
				"bzz-raw://97a0b743efc7d69f772fd8b7bfa0419b7b7a118ffeadb21d44f8e71734f7212d",
				"dweb:/ipfs/QmSm7xEET7Ao6nz6Egrf8SgtfKw6FW7EkU6X6dQs2kGS46"
			]
		},
		"PriceOracle.sol": {
			"keccak256": "0x764382e52cbe3f18490fb8251774cf4869d681de2d2c27d991724701f1a11a47",
			"urls": [
				"bzz-raw://bb6d7302a392f6f82104a667438d7324ac0ac616a90709eff30b09d5de491d56",
				"dweb:/ipfs/QmdFxeBJPnrHdZzqcwMSU8ajxtmJ6j8eG5oRXgsZaFS8oG"
			]
		}
	},
	"version": 1
}