{
	"compiler": {
		"version": "0.6.12+commit.27d51765"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "contract OpenOraclePriceData",
						"name": "priceData_",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "reporter_",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "anchorToleranceMantissa_",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "anchorPeriod_",
						"type": "uint256"
					},
					{
						"components": [
							{
								"internalType": "address",
								"name": "dToken",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "underlying",
								"type": "address"
							},
							{
								"internalType": "bytes32",
								"name": "symbolHash",
								"type": "bytes32"
							},
							{
								"internalType": "uint256",
								"name": "baseUnit",
								"type": "uint256"
							},
							{
								"internalType": "enum UniswapConfig.PriceSource",
								"name": "priceSource",
								"type": "uint8"
							},
							{
								"internalType": "uint256",
								"name": "fixedPrice",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "uniswapMarket",
								"type": "address"
							},
							{
								"internalType": "bool",
								"name": "isUniswapReversed",
								"type": "bool"
							}
						],
						"internalType": "struct UniswapConfig.TokenConfig[]",
						"name": "configs",
						"type": "tuple[]"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "string",
						"name": "symbol",
						"type": "string"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "anchorPrice",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "oldTimestamp",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newTimestamp",
						"type": "uint256"
					}
				],
				"name": "AnchorPriceUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "string",
						"name": "symbol",
						"type": "string"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "reporter",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "anchor",
						"type": "uint256"
					}
				],
				"name": "PriceGuarded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "string",
						"name": "symbol",
						"type": "string"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "price",
						"type": "uint256"
					}
				],
				"name": "PriceUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "reporter",
						"type": "address"
					}
				],
				"name": "ReporterInvalidated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "symbolHash",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "oldTimestamp",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newTimestamp",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "oldPrice",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newPrice",
						"type": "uint256"
					}
				],
				"name": "UniswapWindowUpdated",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "anchorPeriod",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "ethBaseUnit",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "expScale",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "i",
						"type": "uint256"
					}
				],
				"name": "getTokenConfig",
				"outputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "dToken",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "underlying",
								"type": "address"
							},
							{
								"internalType": "bytes32",
								"name": "symbolHash",
								"type": "bytes32"
							},
							{
								"internalType": "uint256",
								"name": "baseUnit",
								"type": "uint256"
							},
							{
								"internalType": "enum UniswapConfig.PriceSource",
								"name": "priceSource",
								"type": "uint8"
							},
							{
								"internalType": "uint256",
								"name": "fixedPrice",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "uniswapMarket",
								"type": "address"
							},
							{
								"internalType": "bool",
								"name": "isUniswapReversed",
								"type": "bool"
							}
						],
						"internalType": "struct UniswapConfig.TokenConfig",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "dToken",
						"type": "address"
					}
				],
				"name": "getTokenConfigByDToken",
				"outputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "dToken",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "underlying",
								"type": "address"
							},
							{
								"internalType": "bytes32",
								"name": "symbolHash",
								"type": "bytes32"
							},
							{
								"internalType": "uint256",
								"name": "baseUnit",
								"type": "uint256"
							},
							{
								"internalType": "enum UniswapConfig.PriceSource",
								"name": "priceSource",
								"type": "uint8"
							},
							{
								"internalType": "uint256",
								"name": "fixedPrice",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "uniswapMarket",
								"type": "address"
							},
							{
								"internalType": "bool",
								"name": "isUniswapReversed",
								"type": "bool"
							}
						],
						"internalType": "struct UniswapConfig.TokenConfig",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "symbol",
						"type": "string"
					}
				],
				"name": "getTokenConfigBySymbol",
				"outputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "dToken",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "underlying",
								"type": "address"
							},
							{
								"internalType": "bytes32",
								"name": "symbolHash",
								"type": "bytes32"
							},
							{
								"internalType": "uint256",
								"name": "baseUnit",
								"type": "uint256"
							},
							{
								"internalType": "enum UniswapConfig.PriceSource",
								"name": "priceSource",
								"type": "uint8"
							},
							{
								"internalType": "uint256",
								"name": "fixedPrice",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "uniswapMarket",
								"type": "address"
							},
							{
								"internalType": "bool",
								"name": "isUniswapReversed",
								"type": "bool"
							}
						],
						"internalType": "struct UniswapConfig.TokenConfig",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "symbolHash",
						"type": "bytes32"
					}
				],
				"name": "getTokenConfigBySymbolHash",
				"outputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "dToken",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "underlying",
								"type": "address"
							},
							{
								"internalType": "bytes32",
								"name": "symbolHash",
								"type": "bytes32"
							},
							{
								"internalType": "uint256",
								"name": "baseUnit",
								"type": "uint256"
							},
							{
								"internalType": "enum UniswapConfig.PriceSource",
								"name": "priceSource",
								"type": "uint8"
							},
							{
								"internalType": "uint256",
								"name": "fixedPrice",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "uniswapMarket",
								"type": "address"
							},
							{
								"internalType": "bool",
								"name": "isUniswapReversed",
								"type": "bool"
							}
						],
						"internalType": "struct UniswapConfig.TokenConfig",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "underlying",
						"type": "address"
					}
				],
				"name": "getTokenConfigByUnderlying",
				"outputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "dToken",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "underlying",
								"type": "address"
							},
							{
								"internalType": "bytes32",
								"name": "symbolHash",
								"type": "bytes32"
							},
							{
								"internalType": "uint256",
								"name": "baseUnit",
								"type": "uint256"
							},
							{
								"internalType": "enum UniswapConfig.PriceSource",
								"name": "priceSource",
								"type": "uint8"
							},
							{
								"internalType": "uint256",
								"name": "fixedPrice",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "uniswapMarket",
								"type": "address"
							},
							{
								"internalType": "bool",
								"name": "isUniswapReversed",
								"type": "bool"
							}
						],
						"internalType": "struct UniswapConfig.TokenConfig",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "dToken",
						"type": "address"
					}
				],
				"name": "getUnderlyingPrice",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "message",
						"type": "bytes"
					},
					{
						"internalType": "bytes",
						"name": "signature",
						"type": "bytes"
					}
				],
				"name": "invalidateReporter",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "lowerBoundAnchorRatio",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "maxTokens",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"name": "newObservations",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "timestamp",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "acc",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "numTokens",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"name": "oldObservations",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "timestamp",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "acc",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes[]",
						"name": "messages",
						"type": "bytes[]"
					},
					{
						"internalType": "bytes[]",
						"name": "signatures",
						"type": "bytes[]"
					},
					{
						"internalType": "string[]",
						"name": "symbols",
						"type": "string[]"
					}
				],
				"name": "postPrices",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "symbol",
						"type": "string"
					}
				],
				"name": "price",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "priceData",
				"outputs": [
					{
						"internalType": "contract OpenOraclePriceData",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"name": "prices",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "reporter",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "reporterInvalidated",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "message",
						"type": "bytes"
					},
					{
						"internalType": "bytes",
						"name": "signature",
						"type": "bytes"
					}
				],
				"name": "source",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "upperBoundAnchorRatio",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"constructor": {
					"details": "Note that to avoid immature TWAPs, the system must run for at least a single anchorPeriod before using.",
					"params": {
						"anchorPeriod_": "The minimum amount of time required for the old uniswap price accumulator to be replaced",
						"anchorToleranceMantissa_": "The percentage tolerance that the reporter may deviate from the uniswap anchor",
						"configs": "The static token configurations which define what prices are supported and how",
						"reporter_": "The reporter whose prices are to be used"
					}
				},
				"getTokenConfig(uint256)": {
					"params": {
						"i": "The index of the config to get"
					},
					"returns": {
						"_0": "The config object"
					}
				},
				"getTokenConfigByDToken(address)": {
					"details": "If a config for the dToken is not found, falls back to searching for the underlying.",
					"params": {
						"dToken": "The address of the dToken of the config to get"
					},
					"returns": {
						"_0": "The config object"
					}
				},
				"getTokenConfigBySymbol(string)": {
					"params": {
						"symbol": "The symbol of the config to get"
					},
					"returns": {
						"_0": "The config object"
					}
				},
				"getTokenConfigBySymbolHash(bytes32)": {
					"params": {
						"symbolHash": "The keccack256 of the symbol of the config to get"
					},
					"returns": {
						"_0": "The config object"
					}
				},
				"getTokenConfigByUnderlying(address)": {
					"params": {
						"underlying": "The address of the underlying asset of the config to get"
					},
					"returns": {
						"_0": "The config object"
					}
				},
				"getUnderlyingPrice(address)": {
					"details": "Implements the PriceOracle interface for Decentralized-Bank v2.",
					"params": {
						"dToken": "The dToken address for price retrieval"
					},
					"returns": {
						"_0": "Price denominated in USD, with 18 decimals, for the given dToken address"
					}
				},
				"invalidateReporter(bytes,bytes)": {
					"details": "Only the reporter may sign a message which allows it to invalidate itself.  To be used in cases of emergency, if the reporter thinks their key may be dankromised.",
					"params": {
						"message": "The data that was presumably signed",
						"signature": "The fingerprint of the data + private key"
					}
				},
				"postPrices(bytes[],bytes[],string[])": {
					"details": "We let anyone pay to post anything, but only prices from configured reporter will be stored in the view.",
					"params": {
						"messages": "The messages to post to the oracle",
						"signatures": "The signatures for the corresponding messages",
						"symbols": "The symbols to dankare to anchor for authoritative reading"
					}
				},
				"price(string)": {
					"params": {
						"symbol": "The symbol to fetch the price of"
					},
					"returns": {
						"_0": "Price denominated in USD, with 6 decimals"
					}
				},
				"source(bytes,bytes)": {
					"details": "Dankaring to a claimed address would add nothing,  as the caller could simply perform the recover and claim that address.",
					"params": {
						"message": "The data that was presumably signed",
						"signature": "The fingerprint of the data + private key"
					},
					"returns": {
						"_0": "The source address which signed the message, presumably"
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"events": {
				"AnchorPriceUpdated(string,uint256,uint256,uint256)": {
					"notice": "The event emitted when anchor price is updated"
				},
				"PriceGuarded(string,uint256,uint256)": {
					"notice": "The event emitted when new prices are posted but the stored price is not updated due to the anchor"
				},
				"PriceUpdated(string,uint256)": {
					"notice": "The event emitted when the stored price is updated"
				},
				"ReporterInvalidated(address)": {
					"notice": "The event emitted when reporter invalidates itself"
				},
				"UniswapWindowUpdated(bytes32,uint256,uint256,uint256,uint256)": {
					"notice": "The event emitted when the uniswap window changes"
				}
			},
			"kind": "user",
			"methods": {
				"anchorPeriod()": {
					"notice": "The minimum amount of time in seconds required for the old uniswap price accumulator to be replaced"
				},
				"constructor": "Construct a uniswap anchored view for a set of token configurations",
				"ethBaseUnit()": {
					"notice": "The number of wei in 1 ETH"
				},
				"expScale()": {
					"notice": "A common scaling factor to maintain precision"
				},
				"getTokenConfig(uint256)": {
					"notice": "Get the i-th config, according to the order they were passed in originally"
				},
				"getTokenConfigByDToken(address)": {
					"notice": "Get the config for the dToken"
				},
				"getTokenConfigBySymbol(string)": {
					"notice": "Get the config for symbol"
				},
				"getTokenConfigBySymbolHash(bytes32)": {
					"notice": "Get the config for the symbolHash"
				},
				"getTokenConfigByUnderlying(address)": {
					"notice": "Get the config for an underlying asset"
				},
				"getUnderlyingPrice(address)": {
					"notice": "Get the underlying price of a dToken"
				},
				"invalidateReporter(bytes,bytes)": {
					"notice": "Invalidate the reporter, and fall back to using anchor directly in all cases"
				},
				"lowerBoundAnchorRatio()": {
					"notice": "The lowest ratio of the new price to the anchor price that will still trigger the price to be updated"
				},
				"maxTokens()": {
					"notice": "The max number of tokens this contract is hardcoded to support"
				},
				"newObservations(bytes32)": {
					"notice": "The new observation for each symbolHash"
				},
				"numTokens()": {
					"notice": "The number of tokens this contract actually supports"
				},
				"oldObservations(bytes32)": {
					"notice": "The old observation for each symbolHash"
				},
				"postPrices(bytes[],bytes[],string[])": {
					"notice": "Post open oracle reporter prices, and recalculate stored price by dankaring to anchor"
				},
				"price(string)": {
					"notice": "Get the official price for a symbol"
				},
				"priceData()": {
					"notice": "The Open Oracle Price Data contract"
				},
				"prices(bytes32)": {
					"notice": "Official prices by symbol hash"
				},
				"reporter()": {
					"notice": "The Open Oracle Reporter"
				},
				"reporterInvalidated()": {
					"notice": "Circuit breaker for using anchor price oracle directly, ignoring reporter"
				},
				"source(bytes,bytes)": {
					"notice": "Recovers the source address which signed a message"
				},
				"upperBoundAnchorRatio()": {
					"notice": "The highest ratio of the new price to the anchor price that will still trigger the price to be updated"
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"UniswapAnchoredView/UniswapAnchoredView.sol": "UniswapAnchoredView"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"UniswapAnchoredView/UniswapAnchoredView.sol": {
			"keccak256": "0x34d979a6a427cb9aee6431aeb357882dec3b696a79445d6f75fe6e2a817972bc",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://4bdc51dce1867ae77d63b9cbe52dd4fd4151faa0a6d56e8761deec4344bb95d7",
				"dweb:/ipfs/QmduSeV6jxD3s9ZhsemFAA5eJJ2RnHSdoiCD5aKLr2GWjg"
			]
		}
	},
	"version": 1
}