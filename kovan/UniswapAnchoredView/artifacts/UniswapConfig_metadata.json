{
	"compiler": {
		"version": "0.6.10+commit.00c0fcaf"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "dToken",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "underlying",
								"type": "address"
							},
							{
								"internalType": "bytes32",
								"name": "symbolHash",
								"type": "bytes32"
							},
							{
								"internalType": "uint256",
								"name": "baseUnit",
								"type": "uint256"
							},
							{
								"internalType": "enum UniswapConfig.PriceSource",
								"name": "priceSource",
								"type": "uint8"
							},
							{
								"internalType": "uint256",
								"name": "fixedPrice",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "uniswapMarket",
								"type": "address"
							},
							{
								"internalType": "bool",
								"name": "isUniswapReversed",
								"type": "bool"
							}
						],
						"internalType": "struct UniswapConfig.TokenConfig[]",
						"name": "configs",
						"type": "tuple[]"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "symbol",
						"type": "string"
					}
				],
				"name": "getHashBySymbol",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "i",
						"type": "uint256"
					}
				],
				"name": "getTokenConfig",
				"outputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "dToken",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "underlying",
								"type": "address"
							},
							{
								"internalType": "bytes32",
								"name": "symbolHash",
								"type": "bytes32"
							},
							{
								"internalType": "uint256",
								"name": "baseUnit",
								"type": "uint256"
							},
							{
								"internalType": "enum UniswapConfig.PriceSource",
								"name": "priceSource",
								"type": "uint8"
							},
							{
								"internalType": "uint256",
								"name": "fixedPrice",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "uniswapMarket",
								"type": "address"
							},
							{
								"internalType": "bool",
								"name": "isUniswapReversed",
								"type": "bool"
							}
						],
						"internalType": "struct UniswapConfig.TokenConfig",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "dToken",
						"type": "address"
					}
				],
				"name": "getTokenConfigByDToken",
				"outputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "dToken",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "underlying",
								"type": "address"
							},
							{
								"internalType": "bytes32",
								"name": "symbolHash",
								"type": "bytes32"
							},
							{
								"internalType": "uint256",
								"name": "baseUnit",
								"type": "uint256"
							},
							{
								"internalType": "enum UniswapConfig.PriceSource",
								"name": "priceSource",
								"type": "uint8"
							},
							{
								"internalType": "uint256",
								"name": "fixedPrice",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "uniswapMarket",
								"type": "address"
							},
							{
								"internalType": "bool",
								"name": "isUniswapReversed",
								"type": "bool"
							}
						],
						"internalType": "struct UniswapConfig.TokenConfig",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "symbol",
						"type": "string"
					}
				],
				"name": "getTokenConfigBySymbol",
				"outputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "dToken",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "underlying",
								"type": "address"
							},
							{
								"internalType": "bytes32",
								"name": "symbolHash",
								"type": "bytes32"
							},
							{
								"internalType": "uint256",
								"name": "baseUnit",
								"type": "uint256"
							},
							{
								"internalType": "enum UniswapConfig.PriceSource",
								"name": "priceSource",
								"type": "uint8"
							},
							{
								"internalType": "uint256",
								"name": "fixedPrice",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "uniswapMarket",
								"type": "address"
							},
							{
								"internalType": "bool",
								"name": "isUniswapReversed",
								"type": "bool"
							}
						],
						"internalType": "struct UniswapConfig.TokenConfig",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "symbolHash",
						"type": "bytes32"
					}
				],
				"name": "getTokenConfigBySymbolHash",
				"outputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "dToken",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "underlying",
								"type": "address"
							},
							{
								"internalType": "bytes32",
								"name": "symbolHash",
								"type": "bytes32"
							},
							{
								"internalType": "uint256",
								"name": "baseUnit",
								"type": "uint256"
							},
							{
								"internalType": "enum UniswapConfig.PriceSource",
								"name": "priceSource",
								"type": "uint8"
							},
							{
								"internalType": "uint256",
								"name": "fixedPrice",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "uniswapMarket",
								"type": "address"
							},
							{
								"internalType": "bool",
								"name": "isUniswapReversed",
								"type": "bool"
							}
						],
						"internalType": "struct UniswapConfig.TokenConfig",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "underlying",
						"type": "address"
					}
				],
				"name": "getTokenConfigByUnderlying",
				"outputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "dToken",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "underlying",
								"type": "address"
							},
							{
								"internalType": "bytes32",
								"name": "symbolHash",
								"type": "bytes32"
							},
							{
								"internalType": "uint256",
								"name": "baseUnit",
								"type": "uint256"
							},
							{
								"internalType": "enum UniswapConfig.PriceSource",
								"name": "priceSource",
								"type": "uint8"
							},
							{
								"internalType": "uint256",
								"name": "fixedPrice",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "uniswapMarket",
								"type": "address"
							},
							{
								"internalType": "bool",
								"name": "isUniswapReversed",
								"type": "bool"
							}
						],
						"internalType": "struct UniswapConfig.TokenConfig",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "maxTokens",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "numTokens",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"methods": {
				"constructor": {
					"params": {
						"configs": "The configs for the supported assets"
					}
				},
				"getTokenConfig(uint256)": {
					"params": {
						"i": "The index of the config to get"
					},
					"returns": {
						"_0": "The config object"
					}
				},
				"getTokenConfigByDToken(address)": {
					"details": "If a config for the dToken is not found, falls back to searching for the underlying.",
					"params": {
						"dToken": "The address of the dToken of the config to get"
					},
					"returns": {
						"_0": "The config object"
					}
				},
				"getTokenConfigBySymbol(string)": {
					"params": {
						"symbol": "The symbol of the config to get"
					},
					"returns": {
						"_0": "The config object"
					}
				},
				"getTokenConfigBySymbolHash(bytes32)": {
					"params": {
						"symbolHash": "The keccack256 of the symbol of the config to get"
					},
					"returns": {
						"_0": "The config object"
					}
				},
				"getTokenConfigByUnderlying(address)": {
					"params": {
						"underlying": "The address of the underlying asset of the config to get"
					},
					"returns": {
						"_0": "The config object"
					}
				}
			},
			"stateVariables": {
				"maxTokens": {
					"details": "Do not change this variable without updating all the fields throughout the contract."
				}
			}
		},
		"userdoc": {
			"methods": {
				"constructor": "Construct an immutable store of configs into the contract data",
				"getTokenConfig(uint256)": {
					"notice": "Get the i-th config, according to the order they were passed in originally"
				},
				"getTokenConfigByDToken(address)": {
					"notice": "Get the config for the dToken"
				},
				"getTokenConfigBySymbol(string)": {
					"notice": "Get the config for symbol"
				},
				"getTokenConfigBySymbolHash(bytes32)": {
					"notice": "Get the config for the symbolHash"
				},
				"getTokenConfigByUnderlying(address)": {
					"notice": "Get the config for an underlying asset"
				},
				"maxTokens()": {
					"notice": "The max number of tokens this contract is hardcoded to support"
				},
				"numTokens()": {
					"notice": "The number of tokens this contract actually supports"
				}
			}
		}
	},
	"settings": {
		"compilationTarget": {
			"kovan/UniswapAnchoredView/UniswapAnchoredView.sol": "UniswapConfig"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"kovan/UniswapAnchoredView/UniswapAnchoredView.sol": {
			"keccak256": "0xde1162350d020b0cf9dfd33a0b4491c9aa3612c19057854d7d3ec2ff590507a4",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://7676a19bea0d238e787777d86ce84832e7a0f722d6d020d5c308348f13c42281",
				"dweb:/ipfs/QmT1MzK2CLf32m2ENke8o2bBASgS87dueEGCT3rzcmYtFb"
			]
		}
	},
	"version": 1
}